#! /usr/bin/env node

var ArgumentParser = require('argparse').ArgumentParser;

var assign = require('object-assign');
var fs = require('fs');
var fsPath = require('path');
var yaml = require('js-yaml');
var deap = require('deap');

function loadConfig(userConfig) {
  var defaults = yaml.safeLoad(fs.readFileSync(
    __dirname + '/../default_config.yml', 'utf8'
  ));

  if (!userConfig) {
    return defaults;
  }
  return deap(defaults, userConfig);
}

function help() {
  var mustache = require('mustache');
  var content = fs.readFileSync(__dirname + '/help.txt', 'utf8');

  console.log(mustache.render(content, {
    'version': require('../package.json').version
  }));
}

function cli(name, config, argv) {
  require('../cli/' + name)(config, argv.slice(1));
}

function main(argv) {
  var parser = new ArgumentParser({
    addHelp: false,
    version: require('../package.json').version
  });

  parser.addArgument(['-c', '--config'], {
    type: function(value) {
      return yaml.safeLoad(fs.readFileSync(fsPath.resolve(value), 'utf8'));
    }
  });

  parser.addArgument(['-h', '--help'], {
    action: 'storeTrue',
    help: 'Show help and usage...'
  });

  var args = parser.parseKnownArgs();
  var argv = args[1];
  var config = loadConfig(args[0].config);

  switch (argv[0]) {
    case 'checkout-revision':
      cli('checkout-revision', config, argv);
      break;
    case 'revision':
      cli('revision', config, argv);
      break;
    case 'clone':
      cli('clone', config, argv);
      break;
    case 'help':
    default:
      help();
      return;
  }
}

main(process.argv);

